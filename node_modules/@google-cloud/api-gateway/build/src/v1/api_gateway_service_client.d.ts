/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The API Gateway Service is the interface for managing API Gateways.
 * @class
 * @memberof v1
 */
export declare class ApiGatewayServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    apiGatewayServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ApiGatewayServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ApiGatewayServiceClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single Gateway.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the form:
     *   `projects/* /locations/* /gateways/*`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.apigateway.v1.Gateway | Gateway}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.get_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_GetGateway_async
     */
    getGateway(request?: protos.google.cloud.apigateway.v1.IGetGatewayRequest, options?: CallOptions): Promise<[
        protos.google.cloud.apigateway.v1.IGateway,
        protos.google.cloud.apigateway.v1.IGetGatewayRequest | undefined,
        {} | undefined
    ]>;
    getGateway(request: protos.google.cloud.apigateway.v1.IGetGatewayRequest, options: CallOptions, callback: Callback<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IGetGatewayRequest | null | undefined, {} | null | undefined>): void;
    getGateway(request: protos.google.cloud.apigateway.v1.IGetGatewayRequest, callback: Callback<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IGetGatewayRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single Api.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the form:
     *   `projects/* /locations/global/apis/*`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.apigateway.v1.Api | Api}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.get_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_GetApi_async
     */
    getApi(request?: protos.google.cloud.apigateway.v1.IGetApiRequest, options?: CallOptions): Promise<[
        protos.google.cloud.apigateway.v1.IApi,
        protos.google.cloud.apigateway.v1.IGetApiRequest | undefined,
        {} | undefined
    ]>;
    getApi(request: protos.google.cloud.apigateway.v1.IGetApiRequest, options: CallOptions, callback: Callback<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IGetApiRequest | null | undefined, {} | null | undefined>): void;
    getApi(request: protos.google.cloud.apigateway.v1.IGetApiRequest, callback: Callback<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IGetApiRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single ApiConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the form:
     *   `projects/* /locations/global/apis/* /configs/*`
     * @param {google.cloud.apigateway.v1.GetApiConfigRequest.ConfigView} request.view
     *   Specifies which fields of the API Config are returned in the response.
     *   Defaults to `BASIC` view.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.apigateway.v1.ApiConfig | ApiConfig}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.get_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_GetApiConfig_async
     */
    getApiConfig(request?: protos.google.cloud.apigateway.v1.IGetApiConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.apigateway.v1.IApiConfig,
        protos.google.cloud.apigateway.v1.IGetApiConfigRequest | undefined,
        {} | undefined
    ]>;
    getApiConfig(request: protos.google.cloud.apigateway.v1.IGetApiConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IGetApiConfigRequest | null | undefined, {} | null | undefined>): void;
    getApiConfig(request: protos.google.cloud.apigateway.v1.IGetApiConfigRequest, callback: Callback<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IGetApiConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new Gateway in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the Gateway, of the form:
     *   `projects/* /locations/*`
     * @param {string} request.gatewayId
     *   Required. Identifier to assign to the Gateway. Must be unique within scope of
     *   the parent resource.
     * @param {google.cloud.apigateway.v1.Gateway} request.gateway
     *   Required. Gateway resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.create_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_CreateGateway_async
     */
    createGateway(request?: protos.google.cloud.apigateway.v1.ICreateGatewayRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createGateway(request: protos.google.cloud.apigateway.v1.ICreateGatewayRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createGateway(request: protos.google.cloud.apigateway.v1.ICreateGatewayRequest, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createGateway()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.create_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_CreateGateway_async
     */
    checkCreateGatewayProgress(name: string): Promise<LROperation<protos.google.cloud.apigateway.v1.Gateway, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Updates the parameters of a single Gateway.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Field mask is used to specify the fields to be overwritten in the
     *   Gateway resource by the update.
     *   The fields specified in the update_mask are relative to the resource, not
     *   the full request. A field will be overwritten if it is in the mask. If the
     *   user does not provide a mask then all fields will be overwritten.
     * @param {google.cloud.apigateway.v1.Gateway} request.gateway
     *   Required. Gateway resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.update_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateGateway_async
     */
    updateGateway(request?: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateGateway(request: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateGateway(request: protos.google.cloud.apigateway.v1.IUpdateGatewayRequest, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateGateway()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.update_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateGateway_async
     */
    checkUpdateGatewayProgress(name: string): Promise<LROperation<protos.google.cloud.apigateway.v1.Gateway, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Deletes a single Gateway.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the form:
     *   `projects/* /locations/* /gateways/*`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.delete_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteGateway_async
     */
    deleteGateway(request?: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteGateway(request: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteGateway(request: protos.google.cloud.apigateway.v1.IDeleteGatewayRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteGateway()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.delete_gateway.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteGateway_async
     */
    checkDeleteGatewayProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Creates a new Api in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API, of the form:
     *   `projects/* /locations/global`
     * @param {string} request.apiId
     *   Required. Identifier to assign to the API. Must be unique within scope of
     *   the parent resource.
     * @param {google.cloud.apigateway.v1.Api} request.api
     *   Required. API resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.create_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApi_async
     */
    createApi(request?: protos.google.cloud.apigateway.v1.ICreateApiRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createApi(request: protos.google.cloud.apigateway.v1.ICreateApiRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createApi(request: protos.google.cloud.apigateway.v1.ICreateApiRequest, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createApi()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.create_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApi_async
     */
    checkCreateApiProgress(name: string): Promise<LROperation<protos.google.cloud.apigateway.v1.Api, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Updates the parameters of a single Api.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Field mask is used to specify the fields to be overwritten in the
     *   Api resource by the update.
     *   The fields specified in the update_mask are relative to the resource, not
     *   the full request. A field will be overwritten if it is in the mask. If the
     *   user does not provide a mask then all fields will be overwritten.
     * @param {google.cloud.apigateway.v1.Api} request.api
     *   Required. API resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.update_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApi_async
     */
    updateApi(request?: protos.google.cloud.apigateway.v1.IUpdateApiRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateApi(request: protos.google.cloud.apigateway.v1.IUpdateApiRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateApi(request: protos.google.cloud.apigateway.v1.IUpdateApiRequest, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateApi()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.update_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApi_async
     */
    checkUpdateApiProgress(name: string): Promise<LROperation<protos.google.cloud.apigateway.v1.Api, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Deletes a single Api.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the form:
     *   `projects/* /locations/global/apis/*`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApi_async
     */
    deleteApi(request?: protos.google.cloud.apigateway.v1.IDeleteApiRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteApi(request: protos.google.cloud.apigateway.v1.IDeleteApiRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteApi(request: protos.google.cloud.apigateway.v1.IDeleteApiRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteApi()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApi_async
     */
    checkDeleteApiProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Creates a new ApiConfig in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API Config, of the form:
     *   `projects/* /locations/global/apis/*`
     * @param {string} request.apiConfigId
     *   Required. Identifier to assign to the API Config. Must be unique within scope of
     *   the parent resource.
     * @param {google.cloud.apigateway.v1.ApiConfig} request.apiConfig
     *   Required. API resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.create_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApiConfig_async
     */
    createApiConfig(request?: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createApiConfig(request: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createApiConfig(request: protos.google.cloud.apigateway.v1.ICreateApiConfigRequest, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createApiConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.create_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_CreateApiConfig_async
     */
    checkCreateApiConfigProgress(name: string): Promise<LROperation<protos.google.cloud.apigateway.v1.ApiConfig, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Updates the parameters of a single ApiConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Field mask is used to specify the fields to be overwritten in the
     *   ApiConfig resource by the update.
     *   The fields specified in the update_mask are relative to the resource, not
     *   the full request. A field will be overwritten if it is in the mask. If the
     *   user does not provide a mask then all fields will be overwritten.
     * @param {google.cloud.apigateway.v1.ApiConfig} request.apiConfig
     *   Required. API Config resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.update_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApiConfig_async
     */
    updateApiConfig(request?: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateApiConfig(request: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateApiConfig(request: protos.google.cloud.apigateway.v1.IUpdateApiConfigRequest, callback: Callback<LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateApiConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.update_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_UpdateApiConfig_async
     */
    checkUpdateApiConfigProgress(name: string): Promise<LROperation<protos.google.cloud.apigateway.v1.ApiConfig, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Deletes a single ApiConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the form:
     *   `projects/* /locations/global/apis/* /configs/*`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApiConfig_async
     */
    deleteApiConfig(request?: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteApiConfig(request: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteApiConfig(request: protos.google.cloud.apigateway.v1.IDeleteApiConfigRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteApiConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.delete_api_config.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_DeleteApiConfig_async
     */
    checkDeleteApiConfigProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.apigateway.v1.OperationMetadata>>;
    /**
     * Lists Gateways in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the Gateway, of the form:
     *   `projects/* /locations/*`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.apigateway.v1.Gateway | Gateway}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listGatewaysAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listGateways(request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest, options?: CallOptions): Promise<[
        protos.google.cloud.apigateway.v1.IGateway[],
        protos.google.cloud.apigateway.v1.IListGatewaysRequest | null,
        protos.google.cloud.apigateway.v1.IListGatewaysResponse
    ]>;
    listGateways(request: protos.google.cloud.apigateway.v1.IListGatewaysRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.apigateway.v1.IListGatewaysRequest, protos.google.cloud.apigateway.v1.IListGatewaysResponse | null | undefined, protos.google.cloud.apigateway.v1.IGateway>): void;
    listGateways(request: protos.google.cloud.apigateway.v1.IListGatewaysRequest, callback: PaginationCallback<protos.google.cloud.apigateway.v1.IListGatewaysRequest, protos.google.cloud.apigateway.v1.IListGatewaysResponse | null | undefined, protos.google.cloud.apigateway.v1.IGateway>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the Gateway, of the form:
     *   `projects/* /locations/*`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.apigateway.v1.Gateway | Gateway} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listGatewaysAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listGatewaysStream(request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listGateways`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the Gateway, of the form:
     *   `projects/* /locations/*`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.apigateway.v1.Gateway | Gateway}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.list_gateways.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_ListGateways_async
     */
    listGatewaysAsync(request?: protos.google.cloud.apigateway.v1.IListGatewaysRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.apigateway.v1.IGateway>;
    /**
     * Lists Apis in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API, of the form:
     *   `projects/* /locations/global`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.apigateway.v1.Api | Api}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listApisAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listApis(request?: protos.google.cloud.apigateway.v1.IListApisRequest, options?: CallOptions): Promise<[
        protos.google.cloud.apigateway.v1.IApi[],
        protos.google.cloud.apigateway.v1.IListApisRequest | null,
        protos.google.cloud.apigateway.v1.IListApisResponse
    ]>;
    listApis(request: protos.google.cloud.apigateway.v1.IListApisRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.apigateway.v1.IListApisRequest, protos.google.cloud.apigateway.v1.IListApisResponse | null | undefined, protos.google.cloud.apigateway.v1.IApi>): void;
    listApis(request: protos.google.cloud.apigateway.v1.IListApisRequest, callback: PaginationCallback<protos.google.cloud.apigateway.v1.IListApisRequest, protos.google.cloud.apigateway.v1.IListApisResponse | null | undefined, protos.google.cloud.apigateway.v1.IApi>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API, of the form:
     *   `projects/* /locations/global`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.apigateway.v1.Api | Api} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listApisAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listApisStream(request?: protos.google.cloud.apigateway.v1.IListApisRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listApis`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API, of the form:
     *   `projects/* /locations/global`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.apigateway.v1.Api | Api}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.list_apis.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_ListApis_async
     */
    listApisAsync(request?: protos.google.cloud.apigateway.v1.IListApisRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.apigateway.v1.IApi>;
    /**
     * Lists ApiConfigs in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API Config, of the form:
     *   `projects/* /locations/global/apis/*`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.apigateway.v1.ApiConfig | ApiConfig}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listApiConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listApiConfigs(request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.apigateway.v1.IApiConfig[],
        protos.google.cloud.apigateway.v1.IListApiConfigsRequest | null,
        protos.google.cloud.apigateway.v1.IListApiConfigsResponse
    ]>;
    listApiConfigs(request: protos.google.cloud.apigateway.v1.IListApiConfigsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.apigateway.v1.IListApiConfigsRequest, protos.google.cloud.apigateway.v1.IListApiConfigsResponse | null | undefined, protos.google.cloud.apigateway.v1.IApiConfig>): void;
    listApiConfigs(request: protos.google.cloud.apigateway.v1.IListApiConfigsRequest, callback: PaginationCallback<protos.google.cloud.apigateway.v1.IListApiConfigsRequest, protos.google.cloud.apigateway.v1.IListApiConfigsResponse | null | undefined, protos.google.cloud.apigateway.v1.IApiConfig>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API Config, of the form:
     *   `projects/* /locations/global/apis/*`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.apigateway.v1.ApiConfig | ApiConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listApiConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listApiConfigsStream(request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listApiConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource of the API Config, of the form:
     *   `projects/* /locations/global/apis/*`
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token.
     * @param {string} request.filter
     *   Filter.
     * @param {string} request.orderBy
     *   Order by parameters.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.apigateway.v1.ApiConfig | ApiConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/api_gateway_service.list_api_configs.js</caption>
     * region_tag:apigateway_v1_generated_ApiGatewayService_ListApiConfigs_async
     */
    listApiConfigsAsync(request?: protos.google.cloud.apigateway.v1.IListApiConfigsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.apigateway.v1.IApiConfig>;
    /**
     * Return a fully-qualified api resource name string.
     *
     * @param {string} project
     * @param {string} api
     * @returns {string} Resource name string.
     */
    apiPath(project: string, api: string): string;
    /**
     * Parse the project from Api resource.
     *
     * @param {string} apiName
     *   A fully-qualified path representing Api resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromApiName(apiName: string): string | number;
    /**
     * Parse the api from Api resource.
     *
     * @param {string} apiName
     *   A fully-qualified path representing Api resource.
     * @returns {string} A string representing the api.
     */
    matchApiFromApiName(apiName: string): string | number;
    /**
     * Return a fully-qualified apiConfig resource name string.
     *
     * @param {string} project
     * @param {string} api
     * @param {string} api_config
     * @returns {string} Resource name string.
     */
    apiConfigPath(project: string, api: string, apiConfig: string): string;
    /**
     * Parse the project from ApiConfig resource.
     *
     * @param {string} apiConfigName
     *   A fully-qualified path representing ApiConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromApiConfigName(apiConfigName: string): string | number;
    /**
     * Parse the api from ApiConfig resource.
     *
     * @param {string} apiConfigName
     *   A fully-qualified path representing ApiConfig resource.
     * @returns {string} A string representing the api.
     */
    matchApiFromApiConfigName(apiConfigName: string): string | number;
    /**
     * Parse the api_config from ApiConfig resource.
     *
     * @param {string} apiConfigName
     *   A fully-qualified path representing ApiConfig resource.
     * @returns {string} A string representing the api_config.
     */
    matchApiConfigFromApiConfigName(apiConfigName: string): string | number;
    /**
     * Return a fully-qualified gateway resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} gateway
     * @returns {string} Resource name string.
     */
    gatewayPath(project: string, location: string, gateway: string): string;
    /**
     * Parse the project from Gateway resource.
     *
     * @param {string} gatewayName
     *   A fully-qualified path representing Gateway resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromGatewayName(gatewayName: string): string | number;
    /**
     * Parse the location from Gateway resource.
     *
     * @param {string} gatewayName
     *   A fully-qualified path representing Gateway resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromGatewayName(gatewayName: string): string | number;
    /**
     * Parse the gateway from Gateway resource.
     *
     * @param {string} gatewayName
     *   A fully-qualified path representing Gateway resource.
     * @returns {string} A string representing the gateway.
     */
    matchGatewayFromGatewayName(gatewayName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
